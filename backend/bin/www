#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,function(){
    console.log('listening on *:5000');
});
server.on('error', onError);
server.on('listening', onListening);





io.on('connection', function (socket) {

    console.log('A user connected:' + socket.id);


    //Tell all clients that someone connected

    io.emit('user joined', socket.id)


    // The client sends 'chat.message' event to server

    socket.on('chat.message', function (message) {

        //Emit this event to all clients connected to it

        io.emit('chat.message', message);

    });


    //client sends "user typing" event to server

    socket.on('user typing', function (username) {

        io.emit('user typing', username);

    });


    //client sends 'stopped typing' event to server

    socket.on('stopped typing', function (username) {

        io.emit('stopped typing', username);

    });


    socket.on('disconnect', function () {

        console.log('User left: ' + socket.id);


        //Tell all clients that someone disconnected

        socket.broadcast.emit('user left', socket.id);

    });
})

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
